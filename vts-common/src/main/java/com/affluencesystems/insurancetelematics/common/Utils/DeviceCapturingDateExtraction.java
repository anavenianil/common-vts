package com.affluencesystems.insurancetelematics.common.Utils;


import com.affluencesystems.insurancetelematics.common.Models.GpsData;
import com.affluencesystems.insurancetelematics.common.Models.StrideDetails;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

import static com.affluencesystems.insurancetelematics.common.Utils.ParametersSizes.*;
import static com.affluencesystems.insurancetelematics.common.Utils.StrideConstants.*;

public class DeviceCapturingDateExtraction {
	
//	public static void main(String[] args) {
//		DeviceCapturingDateExtraction data=new DeviceCapturingDateExtraction();
//		data.extractHistoryData("/home/harikanta/VehicleTrackingSystem/8/6/9/6/9/6/0/4/9/4/3/0/7/5/9/2019/06/11/HIS201906111053.txt");
//	//	data.constructNormalPacket("/home/harikanta/VehicleTrackingSystem/8/6/9/6/9/6/0/4/9/4/3/0/7/5/9/2019/06/05/NOR201906051019.txt");
//	}

	public ArrayList<StrideDetails> constructNormalPacket(String path) {
	
		StrideDetails strideDetails = null;
		ArrayList<GpsData> gpsDataList=null;
		ArrayList<StrideDetails> strideDetailsList = new ArrayList<>();
		try {
			BufferedReader in = new BufferedReader(new FileReader(path));
			String s;
			int UptoCanData= VEHICLE_STATUS_DATA + DIGITL_INPUT_AND_DIGITAL_OUTPUT + MainInputVoltage + InternalBatteryVoltage;
			//int uptoCanSpeed = CAN_DETAILS + Pid_5 + Pid_4 + Pid_12;
			//int uptoMillage = uptoCanSpeed + Pid_17 + Pid_31 + Pid_33 + Pid_49 + Pid_51 + Pid_77 + Pid_78 + Pid_81
				//	+ Pid_94;
		//	int UptoGpsFix = uptoMillage + MILLAGE + LITER_PER_HOUR + NetworkOperator + M_C_C + M_N_C + LOCATION_CODE
			//		+ Cell_id;
			int i=0;
			while ((s = in.readLine()) != null) {
			//	s
				if(i!=0) {
				if (s != null && s.length() > 0) {
					strideDetails = new StrideDetails();
					int canData=UptoCanData;
					StringBuffer data = new StringBuffer(s).reverse();
					System.out.println(data.length());
					 canData=canData(strideDetails, canData, data);
					 canData=canData+ M_C_C + M_N_C + LOCATION_CODE+NetworkOperator+Cell_id;
					 gpsDataList=new ArrayList<>();
					 gpsData(data, canData,gpsDataList);
					strideDetails.setGpsData(gpsDataList);
				}
				strideDetailsList.add(strideDetails);
			}
			i++;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return strideDetailsList;

	}

	public int  canData(StrideDetails details, int canData,StringBuffer data) {
		int canFlag=convertBinaryToInteger(data, canData, CAN_FLAG);
		canData=canData+CAN_FLAG;
		if(canFlag!=0) {
		if(canFlag==1)
		{
			canData=oneTimeCanData(details,canData,data);
		}
		else	if(canFlag==2) {
			canData=diagnosticData(details,canData,data);
		}
		else if(canFlag==4)
		{
			canData=oneTimeCanData(details,canData,data);
			canData=diagnosticData(details,canData,data);
		}

		  canData=engineAndFuelData(details,canData,data);
		}
		return canData;
		}
		
		
		

	private int engineAndFuelData(StrideDetails details, int canData, StringBuffer data) {//27
	
		canData = canData + Pid_5;//2
		
		details.setEngineLoad(convertBinaryToInteger(data, canData, Pid_4));
		canData = canData + Pid_4;//4

		details.setEngineRpm((float)convertBinaryToInteger(data, canData, Pid_12)/100);
		canData = canData + Pid_12;//8

		details.setSpeedCan(convertBinaryToInteger(data, canData, Pid_13));
		canData = canData + Pid_13;//9
		
		canData = canData + Pid_17+Pid_31+Pid_51;//14
		details.setFuelType((byte)convertBinaryToInteger(data, canData, Pid_81));
		canData = canData + Pid_81;//15

		canData = canData +Pid_94;//19
		
		details.setMillage(convertBinaryToInteger(data, canData, MILLAGE));
		canData = canData +MILLAGE;//21
		
		details.setFuelPerLiter((float)convertBinaryToInteger(data, canData, LITER_PER_HOUR)/100);
		canData = canData +LITER_PER_HOUR;//23

		details.setCanFuelConsumed((float)convertBinaryToInteger(data, canData, CAN_FUEL_CONSUMED)/1000);
		canData = canData +CAN_FUEL_CONSUMED;//27
		return canData;
	}

	private int diagnosticData(StrideDetails details, int canData, StringBuffer data) {
		return canData + CAN_DETAILS+Pid_33+Pid_49+Pid_77+Pid_78;
		
	}




public int oneTimeCanData(StrideDetails details,int canData,StringBuffer data) {
	//details.setPidSupportedByVehicle(convertBinaryToInteger(data, canData, Pid_0));
	/*totalCount= totalCount + Pid_0;
	logger.debug("can Details----> " + normal.getPidSupportedByVehicle());
	normal.setVin(ProtocolServices.convertbyteByteArrayToString(normalPacket, totalCount, VIN));
	logger.debug("can Details----> " + normal.getVin());*/
	return canData=Pid_0+VIN;
	
}
	public int convertBinaryToInteger(StringBuffer data, int StartPoistion, byte size) {

		return Integer.parseInt(
				new StringBuilder(data.substring(StartPoistion * 8, StartPoistion * 8 + size * 8)).reverse().toString(),
				2);
	}

	public StringBuffer extractPaticulatBinaryString(StringBuffer data, int StartPoistion, int size) {
		return new StringBuffer(data.substring(StartPoistion * 8, StartPoistion * 8 + size * 8));
	}

	public int  gpsData(StringBuffer data, int uptoGpsFix,List<GpsData> gpsDataList) {
		int gpsDataCount = uptoGpsFix;
		int gpsFix = convertBinaryToInteger(data, gpsDataCount, GpsFix);
		if (gpsFix == 1) {
			gpsDataCount = gpsDataCount + GpsFix;
			int noOfHeaders = convertBinaryToInteger(data, gpsDataCount, GpsFix);
			gpsDataCount = gpsDataCount + NO_OF_HEADERS;
			GpsData gps = null;
			for (int i = 0; i < noOfHeaders; i++) {

				StringBuffer gpsDetails = extractPaticulatBinaryString(data, gpsDataCount, GPS_HEADER_DETAILS);
				int gpsDetailsCount = 0;
				StringBuffer dateAndTImeInMinutes = ConvertTimeAndDateFromBytesToBits(gpsDetails, false);
				gpsDetailsCount = gpsDetailsCount + DATE + MONTH + YEAR + HOURS + MINUTES;

				int noOFSatellites = Integer.parseInt(
						reverseTheBytes(gpsDetails.substring(gpsDetailsCount, gpsDetailsCount + NO_OF_SATILITES)), 2);
				gpsDataCount = gpsDataCount + GPS_HEADER_DETAILS;
				int noOfGpsPackets = convertBinaryToInteger(data, gpsDataCount, NO_OF_GPS);
				gpsDataCount = gpsDataCount + NO_OF_GPS;
				int altitude = convertBinaryToInteger(data, gpsDataCount, ALTITUDE);
				gpsDataCount = gpsDataCount + ALTITUDE;
				for (int j = 0; j < noOfGpsPackets; j++) {

					gps = new GpsData();
					// gps.setSpeed(speed);
					gps.setAltitude(altitude);
					gps.setSatelitesCount(noOFSatellites);
					StringBuffer dataAndTimeinSec = new StringBuffer(dateAndTImeInMinutes);
					StringBuffer secAndDirections = extractPaticulatBinaryString(data, gpsDataCount,
							sec_And_Directions);
					gpsDataCount = gpsDataCount + sec_And_Directions;
					// secAndDirections.reverse();
					int secAndDirectionsCount = 0;
					int secs = Integer.parseInt(reverseTheBytes(
							secAndDirections.substring(secAndDirectionsCount, secAndDirectionsCount + SEC)), 2);
					if (secs <= 9)
						dataAndTimeinSec.append(0);
					dataAndTimeinSec.append(secs);
					gps.setDateTime(dataAndTimeinSec.toString());
					secAndDirectionsCount = secAndDirectionsCount + SEC;
					int temp = Integer.parseInt(reverseTheBytes(secAndDirections.substring(secAndDirectionsCount,
							secAndDirectionsCount + Latitude_dir + Longitude_dir)), 2);
					secAndDirectionsCount = secAndDirectionsCount + Latitude_dir + Longitude_dir;
					if (temp == 3) {
						gps.setLatitudeDir(LATITUDE_DIRECTION_NORTH);
						gps.setLongitudeDir(LONGITUDE_DIRECTION_EAST);
					} else if (temp == 2) {
						gps.setLatitudeDir(LATITUDE_DIRECTION_NORTH);
						gps.setLongitudeDir(LONGITUDE_DIRECTION_WEST);
					} else if (temp == 1) {
						gps.setLatitudeDir(LATITUDE_DIRECTION_SOUTH);
						gps.setLongitudeDir(LONGITUDE_DIRECTION_EAST);
					} else {
						gps.setLatitudeDir(LATITUDE_DIRECTION_SOUTH);
						gps.setLongitudeDir(LONGITUDE_DIRECTION_WEST);
					}

					gps.setLatitude(getLatOrLong(data, gpsDataCount));
					gpsDataCount = gpsDataCount + Latitude_AFTER_DECIMAL + Latitude_BEFORE_DECIMAL;

					gps.setLongitude(getLatOrLong(data, gpsDataCount));
					gpsDataCount = gpsDataCount + LONGITUDE_AFTER_DECIMAL + Latitude_BEFORE_DECIMAL;
					gps.setSpeed(convertBinaryToInteger(data, gpsDataCount, SPEED));
					gpsDataCount = gpsDataCount + SPEED;
					gpsDataList.add(gps);
				}

			}

		}

		return gpsDataCount;

	}
	public static final byte HISTORY_FLAG=1;

	private float getLatOrLong(StringBuffer data, int startPosition) {
		int latOrLOng = convertBinaryToInteger(data, startPosition, Latitude_BEFORE_DECIMAL);
		startPosition = startPosition + Latitude_BEFORE_DECIMAL;

		int latOrLOngExponenitial = convertBinaryToInteger(data, startPosition, Latitude_AFTER_DECIMAL);
		StringBuffer latiOrLon = new StringBuffer();
		latiOrLon.append(latOrLOng);
		latiOrLon.append(".");
		latiOrLon.append(latOrLOngExponenitial);
		return Float.parseFloat(latiOrLon.toString());

	}

	public static StringBuffer ConvertTimeAndDateFromBytesToBits(StringBuffer dateAndTimeInBinary,
			boolean secAvailable) {
		int dataTimeCount = 0;
		StringBuffer dateAndTime = new StringBuffer();
		int date = Integer.parseInt(reverseTheBytes(dateAndTimeInBinary.substring(dataTimeCount, DATE)), 2);
		if (date <= 9)
			dateAndTime.append(0);
		dateAndTime.append(date);
		dataTimeCount = dataTimeCount + DATE;
		int month = Integer
				.parseInt(reverseTheBytes(dateAndTimeInBinary.substring(dataTimeCount, dataTimeCount + MONTH)), 2);
		if (month <= 9)
			dateAndTime.append(0);
		dateAndTime.append(month);
		dataTimeCount = dataTimeCount + MONTH;
		dateAndTime.append(Integer
				.parseInt(reverseTheBytes(dateAndTimeInBinary.substring(dataTimeCount, dataTimeCount + YEAR)), 2));
		dataTimeCount = dataTimeCount + YEAR;
		int hours = Integer
				.parseInt(reverseTheBytes(dateAndTimeInBinary.substring(dataTimeCount, dataTimeCount + HOURS)), 2);
		if (hours <= 9)
			dateAndTime.append(0);
		dateAndTime.append(hours);
		dataTimeCount = dataTimeCount + HOURS;
		int minutes = Integer
				.parseInt(reverseTheBytes(dateAndTimeInBinary.substring(dataTimeCount, dataTimeCount + MINUTES)), 2);
		if (minutes <= 9)
			dateAndTime.append(0);
		dateAndTime.append(minutes);
		dataTimeCount = dataTimeCount + MINUTES;
		if (secAvailable) {
			int sec = Integer
					.parseInt(reverseTheBytes(dateAndTimeInBinary.substring(dataTimeCount, dataTimeCount + SEC)), 2);
			if (sec <= 9)
				dateAndTime.append(0);
			dateAndTime.append(sec);

			dataTimeCount = dataTimeCount + SEC;
		}
		return dateAndTime;

	}

	public static String reverseTheBytes(String message) {
		return new StringBuilder(message).reverse().toString();
	}
	
	public List<StrideDetails>  extractHistoryData(String path) {
		
		List<StrideDetails> strideDetailsList = new ArrayList<>();
		try {
			BufferedReader in = new BufferedReader(new FileReader(path));
			String s;
			int Count= FirmWare + VehicleRegNo+1+3 ;
			while ((s = in.readLine()) != null) {
				s
				if (s != null && s.length() > 0) {
					int totalCount=Count;
					
					StringBuffer data = new StringBuffer(s).reverse();
					/*int NoOfPackets=convertBinaryToInteger(data, totalCount, (byte)1);
					totalCount=totalCount+1;*/
				//	 List<StrideDetails> strideDetailsList=new ArrayList<>();
	
					strideDetailsList.addAll(recursiveForHistoryData(strideDetailsList, totalCount, data));
				
				}
			}
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		return strideDetailsList;

	}

	public List<StrideDetails> recursiveForHistoryData( List<StrideDetails> strideDetailsList,int totalCount,StringBuffer data) {
		StrideDetails strideDetails=null;
		ArrayList<GpsData> gpsDataList =null;
		 gpsDataList=new ArrayList<>();
			int statusBit=convertBinaryToInteger(data, totalCount, (byte)1);
			totalCount=totalCount+1;
			strideDetails = new StrideDetails();
			if(statusBit==5) {
				
			totalCount = canData(strideDetails, totalCount, data);
			strideDetailsList.add(strideDetails);
			}
	else if(statusBit==4) {
		//strideDetails = new StrideDetails();
		 totalCount=gpsData(data,totalCount,gpsDataList);
		 strideDetails.setGpsData(gpsDataList);
	}
	else if (statusBit == 6) {
		//strideDetails = new StrideDetails();
		totalCount = gsmDataSizeForHistory(totalCount);	
	}
			strideDetailsList.add(strideDetails);
			if(totalCount*8!=data.length())
				recursiveForHistoryData(strideDetailsList,totalCount, data);
		return strideDetailsList;	
		}
	private int gsmDataSizeForHistory(int totalCount) {
		return totalCount + LOCATION_CODE + Cell_id;
	}
	//}
}
